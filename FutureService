package com.test.current.future;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class FutureService {

    public void testService(int num) {

        ExecutorService executor = Executors.newFixedThreadPool(num);
        Future[] futures = new Future[num];
        for (int i = 0; i < num; i++) {
            final int index = i;
            futures[i] = executor.submit(new Callable<Integer>() {
                @Override
                public Integer call() throws Exception {
                    long startCheck = System.currentTimeMillis();
                    int result = runTask();
                    long last = System.currentTimeMillis() - startCheck;
                    System.out.println(last);
                    return result;
                }
            });
        }
        executor.shutdown();

        List<Integer> l = new ArrayList<>();
        for (Future future : futures) {
            try {
                Integer test = (Integer) future.get();
                l.add(test);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        l.stream().forEach(integer -> {
            System.out.println(integer);
        });
        //System.out.println(l.size());
    }


    private int runTask() {
        Random random = new Random();
        int t = random.nextInt(10);
        try {
            Thread.sleep(t * 1000);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return t;
    }

    public static void main(String[] args){
        FutureService futureService= new FutureService();
        futureService.testService(10);
    }
}
